## Getting bootable

So, you've prepped the application, got the new files generated, and are now ready to move forward with the upgrade.  First, we're going to get the application reconfigured with the new-style configuration files, and then we'll make some essential code changes.

### Configuring your app again

Now comes the task of configuration.  There aren't a whole ton of changes, but navigating them can trip up the novice and journey(wo)man alike.  Things like initializers and your settings in `database.yml` can generally stay the same; the main changes have to do with `environment.rb`, the router, and gem vendoring.

> **PROTIP:** When using SQLite, the database file is now the `database` key rather than the `dbfile` key.

### Configuring the environment

In all previous Rails versions, most configuration and initialization happened in `config/environment.rb`. In Rails 3, most of this logic has moved to `config/application.rb` and a host of special initializers in `config/initializers`.  If you open up `config/environment.rb`, you'll notice it's been seriously slimmed down, and looks like this now:

    # Load the rails application
    require File.expand_path('../application', __FILE__)

    # Initialize the rails application
    YourApp::Application.initialize!

Simple: the `application.rb` file is required and then the `Application` (Rack endpoint for your Rails application) is initialized.  The `YourApp` constant is generated based on the folder name for your app (i.e., `rails ~/code/my_super_app` would make it `MySuperApp`).  The constant doesn't have any special relationship to the folder the app lives in, so you can rename it at will (so long as you do it everywhere it's used). But be careful; since you'll be using this constant in a few places, if you change it be sure to make it something useful.

Now open up `application.rb`. If you generated the files using the Rails 3 generator, you should have one that looks something like this:

    module TestDevApp
      class Application < Rails::Application
        # ...Insert lots of example comments here...
        
        # Configure sensitive parameters which will be filtered from the log file.
        config.filter_parameters << :password
      end
    end

For the most part, all the code inside the Rails initializer block from your old `environment.rb` (i.e., all your `config.*` calls) should transfer straight over: just use the `rails:upgrade:configuration` method or copy and paste them inside the class body.  That part of the configuration is simple; if you have any extraneous code outside of that configuration block, I heartily recommend  you move it either into an initializer or to the bottom of `application.rb`.

> **PROTIP:** You may be wondering, "What about `RAILS_GEM_VERSION`?"  To specify what version of Rails to lock your application to, specify it in the `Gemfile` according to the `bundler` syntax (see Section 4.2.2 for more information).

Next, take a look at some of the newly generated code.  You'll notice a block like this:

    config.generators do |g|
      g.orm             :active_record
      g.template_engine :erb
      g.test_framework  :test_unit, :fixture => true
    end

This is where you can configure what ORM, test framework, and template engine Rails will use.  Since you're upgrading existing code, you'll probably stick with the defaults (unless, of course, you're already using something like `haml`), but you could substitute in something like `:datamapper` or `:sequel` for `:active_record`, `:haml` for `:erb`, or `:rspec` for `:test_unit` (once they get it working with Rails 3).  Doing so will set the generators for models, views, etc., to use your tool of choice. For example, if you generate a scaffold with `haml` and `rspec` as your tools, it should in theory generate the templates with Haml syntax and the tests using RSpec. (I don't know if all these generators are available yet, but they should be soon.)

The `config/application.rb` file also houses some configuration for other things.

* If you need to configure internationalization, it's been moved to `application.rb`.  Rails 3 comes equipped with a really powerful i18n toolkit powered by the `i18n` gem*http://github.com/svenfuchs/i18n*{.fn}.  The defaults that Rails sets up will work for most people (default locale is `en` and all translations in the default directory are automatically imported), so you may not need to touch anything. But if you need to customize, this is the place to do it.
* You may want to set a default timezone.  I usually stick with UTC, since it's easy to convert on a per-user basis to their desired timezone, but you might want to set it to your timezone or the server's timezone.
* Your favorite old haunts from `config/environment.rb` such as `config.plugins`, `config.load_paths`, etc., are still there (even though `config.gems` is not).

Many of the other configuration bits that were once in `environment.rb`, like custom inflections, mime types, and so on, have been moved out into their own initializers in the `config/initializers` directory.  While you can leave them in `application.rb` when you move them out of `environment.rb`, I highly recommend you place them in their proper place in an initializer.

If you opted to keep any custom initializers or specialized environment files during the generation process, you'll probably need to go in there and update the syntax.  Many of these (especially the environment files like `config/environments/production.rb`) now require a new block syntax:

    # Rails 2.x
    config.cache_classes = false
    config.action_controller.perform_caching = true
    
    # Rails 3.x
    YourApp::Application.configure do
      config.cache_classes = false
      config.action_controller.perform_caching = true
    end
    
All configuration happens inside the `Application` object for your Rails app, so these configuration files, too, need to be executed inside of it.  As I said, most things in there should still work fine once wrapped in the block, but there are a few that have changed.  For example, `config.active_record.default_timezone` is now `config.time_zone`, and it uses time zone strings (e.g., `'Central Time (US & Canada)'` rather than symbols like `:cst`.  See the *Deprecation Checklist* for more information about what has changed.

#### Converting your routes file

The next step is to move your routes to the Rails 3 router syntax.  The new router is great, but it's not incredibly easy to migrate existing routes over to the new syntax.  Upgrading your routes is fairly simple so long as you haven't done anything complex; it's just not as easy as copying and pasting.  Some things, like `namespaces`, work the same, but most other things have a much-changed syntax.

> **PROTIP**: You don't *have* to upgrade your routes immediately; the Rails core team has a legacy mapper in place at least until Rails 3.1.  It is recommended that you do it as soon as possible, though, since that mapper will not always be there.

You can automate upgrading your routes file with the `rails:upgrade:routes` task; it should handle nearly every case you throw at it.  In case it doesn't, though, I'm going to walk you through some manual upgrade cases.  To start with the simplest case, mapping the root route (i.e., for the "/" path) previously looked like this:

    map.root :controller => 'home', :action => 'index'

This maps the root path to the `index` action on `HomeController`.  In Rails 3, a functionally equivalent route is:

    root :to => 'home#index'

Note that rather than specify the controller and action as hash arguments, they are now specified in a pattern typically seen in documentation (i.e., "class#method").  

Moving up the complexity scale, to convert a simple, normal route, start with a route like:

    map.connect '/posts/mine', :controller => 'posts', :action => 'index'

This connects the path "http://example.com/posts/mine" to the `index` action on `PostsController`.  The equivalent route in Rails 3 looks like this:
    
    match '/posts/mine', :to => 'posts#index'

If you wanted to provide extra parameters to the route (for example, a default value for a parameter or an extra parameter to an action that expects it from other routes), you do this in Rails 2.x:

    map.connect '/by_date', :controller => 'pictures', :action => 'index', 
                         :sort => 'date'

Notice in the following Rails 3 route that adding a default parameter looks very similar (i.e., simply add them as hash arguments to the end of the route definition):

    match '/by_date', :to => 'pictures#index', :type => 'date'

The syntax for named routes (i.e., routes that generate a helper like `posts_path`) is also significantly different. A named route in Rails 2.x looks something like this:

    map.login '/login', :controller => 'sessions', :action => 'new'
    
This route generates helper methods named `login_path` and `login_url` and connects the path 'http://example.com/login' to the `new` action on `SessionsController`.  In Rails 3, this route looks like this:
    
    match '/login', :to => 'sessions#new', :as => 'login'
    
Note that, unlike in Rails 2.x, the method called to define the route remains the same (`match`), but we add an `:as` parameter to indicate what the route is named.

Resource routes have seen a significant shift also.  Previously, specifying special methods for the collection and members of the collection of resources required a sticky-looking set of hashes:

    map.resources :users, :member => {:ban => :post} do |users|
      # Child routes here...
    end
    
In Rails 3, these methods are broken out into their own block inside the `resources` block:
    
    resources :users do
      member do
        post :ban
      end
    end

Member methods go in a `member` block and `collection` methods go in a `collection` block.  Also note the request method (`post`) ss the method call and the action name as a `Symbol` (`:ban`) is the argument; their order is reversed from the old Rails 2 hash-style syntax.

Nesting another set of resources inside a resource in Rails 2.x looked like this:

    map.resources :posts do |post|
      post.resources :comments
      post.resources :spams
    end
    
In Rails 3, this syntax is cleaned up a little bit:

    resources :posts do
      resources :comments
      resources :spams
    end

Note the lack of block variable and method calls on it; as you've seen in other route conversion examples, the new router does away with that sort of syntax.

If you have routes with requirements, such as a name parameter having to be a certain string or id's having to match a certain pattern, Rails 3 also supports those with a different syntax.  For example, let's say you have a route that said a `participant_id` parameter had to start with 2 letters followed by numbers; in Rails 2.x, that would look like this:

    map.connect '/people/participants/:participant_id', :controller => 'participants',
                :action => 'show', :requirements => { :participant_id => /^[a-z]{2}\d+/i}

The `:requirements` argument specifies what parameter to check and a pattern to check it with.  The syntax is very similar in Rails 3, but with a different name:

    match '/people/participants/:participant_id', :to => 'participants#show', 
          :constraints => { :participant_id => /^[a-z]{2}\d+/i}

So, essentially the `requirements` argument is now the `constraints` argument, but it's not exactly the same: Rails 3 makes the constraints/requirements mechanism much more robust.  You can read about some of the new features in Section 5.3.

#### Setting up the gem bundler

Rails 2's gem vendoring solution left much to be desired, from issues with properly requiring gems to problems with the gem detection (I can't tell you how many times I nixed a gem from the list because it kept telling me to install it even though it was already installed). Rails seriously needed a replacement for such a vital piece of infrastructure.  These days we have Yehuda Katz's excellent bundler*http://github.com/carlhuda/bundler*{.fn}, which totally replaces `config.gem` in Rails 3.

Essentially, bundler works off of `Gemfiles` (kind of like `Rakefiles` in concept) that contain a description of what gems to get, how to get them, and when to get them.  Moving your gem requirements to a `Gemfile` isn't as simple as copying them over.  You can automate it using `rails:upgrade:gems`, but in the interest of greenfielding new apps with Rails 3 (or possibly using Bundler in non-Rails applications), I'm going to walk you through how to setup a Gemfile and  convert your Rails 2 code to it.

Converting a Rails 2 `config.gem` call to a `Gemfile` directive isn't terribly difficult; for example, here's a pretty hairy `config.gem` call: 

    config.gem "aws-s3", :version => "0.5.1", 
               :lib => "aws/s3", :source => "http://gems.omgbloglol.com"

So we want the `aws-s3` gem, version `0.5.1`, from a custom source, and it must be required as `aws/s3` in our app.  In a `Gemfile`, it looks like this:
    
    source "http://gems.omgbloglol.com"
    gem "aws-s3", "0.5.1", :require => "aws/s3"

So `:source` parameters become `source` calls *before* the gem that you want to fetch; this call adds the source given to a list of sources to search for gems that we need to install.

> **PROTIP:** Sources don't have to be added immediately before the gem, but do have to be added before that particular gem requirement.

Sources resolve in order of addition, so you probably want to keep Gemcutter first, unless you need a specialized version of a gem that's on Gemcutter from a secondary source.

The version is now simply the second string requirement; if this is left out (i.e., you simply had `gem "aws-s3", :require => "aws/s3"`), it will assume you want the latest version.  And finally, the `:lib` argument is now `:require` (which makes more sense).  So, to sum up the changes:

* Remove the `config` object
* `:lib` key becomes the `:require` key
* The `:version` key becomes a second, optional string argument
* Move `:source` arguments to a `source` call to add it to the sources

Now let's take a look at the `Gemfile` that Rails generated for you:

    # Edit this Gemfile to bundle your application's dependencies.
    source :gemcutter

    gem "rails", "3.0.0.beta"

    ## Bundle edge rails:
    # gem "rails", :git => "git://github.com/rails/rails.git"

    gem "mysql"

    ## Bundle the gems you use:
    # gem "bj"
    # gem "hpricot", "0.6"
    # gem "sqlite3-ruby", :require => "sqlite3"
    # gem "aws-s3", :require => "aws/s3"

    ## Bundle gems used only in certain environments:
    # gem "rspec", :group => :test
    # group :test do
    #   gem "webrat"
    # end

Notice that it has added `mysql` as a dependency; when I generated this app, that's what I set as the database driver via the `-d` option.  Were you to specify something else (like `pg` or `sqlite`) it would have the proper dependency.  

As mentioned before, `bundler` is much more powerful than `config.gem`, and one of the great features it adds is the concept of a gem "group."  You can specify a group of gems to only be required/activated in certain environments, so you can stop doing weird things with environment checks around your `config.gem` requirements.  You can see an example of this technique in the commented-out requirements at the bottom of the generated `Gemfile`.  So, let's say I want to use `mocha`, but only when testing (obviously).  I would add this to `Gemfile`:

    group :test do
      gem "mocha"
    end
    
    # or...
    
    gem "mocha", :group => :test
    
Now this gem will only be added in when running the app in the `test` environment.  This technique is also useful for production only gems related to caching and what not, or for specifying special gems for your development environment, such as debuggers and log analyzers.

Now that you've got a proper `Gemfile`, run `bundle pack` if you want to vendor everything or `bundle install` to install the gems to system gems.  The `bundler` is much more powerful than `config.gem`, and it helps you do more advanced tasks (e.g., bundle directly from a Git repository, as you can see in the generated `Gemfile`, specify granular paths, etc.).  So, once you move your `config.gem` calls over, you may want to look into the new features*http://github.com/carlhuda/bundler/blob/master/README.markdown*{.fn}.

### Code fixes

Your application should be properly configured now, so let's move on to changes you need to make in your application code.  To get an application actually bootable, the changes will likely be fairly minimal if anything (unless you have a rogue plugin that will give you issues), but the following changes will be required in coming versions.

#### `RAILS_*` constants are deprecated

In all previous versions of Rails, one referred to the root directory of a Rails application with `RAILS_ROOT` or the environment with `RAILS_ENV`.  Well, these constants are going away in lieu of a nice module*http://api.rubyonrails.org/classes/Rails.html*{.fn} that houses all of them.  For example, `RAILS_ROOT` is now `Rails.root`, `RAILS_ENV` is now `Rails.env`, etc.

> **PROTIP:** These conversions aren't absolutely required yet, but you will get a warning about them.  The plan is to get rid of them very soon, so make sure you make the change as soon as you can.

The nice thing about these new module methods is that you can replace code that looks like this:

    if RAILS_ENV == "production"
      # ...
    end
    
...with something a little more readable:

    if Rails.env.production?
      # ...
    end

This works with custom environments like `staging_309` or `production_on_my_box`, too.  This sugar comes from a special class named `ActiveSupport::StringInquirer` that lets you query the contents of the string (i.e., `"what".what?` would evaluate to `true`).*http://api.rubyonrails.org/classes/ActiveSupport/StringInquirer.html*{.fn}  Just another little touch of syntactic sugar to add some elegance.

#### Converting mailers to the new API

The Action Mailer API has always been a sore spot in the Rails world: is it a controller or a model?  Why does it act like a controller but live in models?  Where do these magic methods come from?  Fortunately for Rails 3, they've greatly de-metafied the code and made its API much more straightforward.

> **PROTIP:** The old API currently works, but it's a compatibility shim, which will be removed in a future version, so you should upgrade your mailers.  Plus, the old API is icky.

Let's take a look at a basic user notification mailer from Rails 2.x.

    class UserMailer < ActionMailer::Base
      def new_friend_notification(user, friend)
        recipients      user.email
        from            "notifier@example.com"
        subject         "You have a new friend!"
        body            :user => user, :friend => friend
      end
    end

This mailer simply alerts a user when they have a new friend in their social network in our hypothetical app: the user receives the e-mail, we send it from our notifier e-mail address, and we pass the user and their new friend as body parameters (they will show up as instance variables to the template, oddly enough).  This API is sort of confusing (we're setting attributes using simple method calls, which is sort of ugly) and looks nothing like anything else in Rails.  Plus, it lacks anything like filters and so on, not to mention that to use it you have to use magical methods like `deliver_new_friend_notification`.  Now here's the same mailer using the new Action Mailer API:

    class UserMailer < ActionMailer::Base
      default :from => "notifier@example.com"
  
      def new_friend_notification(user, friend)
        @user = user
        @friend = friend

        mail(:to => user.email, :subject => "You have a new friend!")
      end
    end
    
Much cleaner and closer to what we're used to.  Instance variables are carried over from the parent class to the templates, and the object returned from the method is just an object that we call methods on to generate the e-mail or send it.

    user = User.find(1337)
    new_friend = User.find(42)
    
    UserMailer.new_friend_notification(user, new_friend).deliver
    
If you wanted the message as a string, you simply call `to_s` on the object returned from the mailer method rather than calling the magical `create_*` method that the old Action Mailer had for getting a string version of a message.

The handling of attachments is a bit cleaner also.  Previously, a mailer with attachments would look like this:

    class AssetMailer < ActionMailer::Base
      def send_purchased_asset(user, asset)
        recipients      recipient.email
        from            "mailer@example.com"
        
        subject         "Here is your image: #{asset.name}"
        body            :account => recipient

        attachment :content_type => "image/jpeg",
                   :body => File.read(asset.path)
      end
    end
    
Not terrible, but the `:body` parameter is awkward since it's not really a "body."  In Rails 3, this is just a bit more elegant:

    class AssetMailer < ActionMailer::Base
      def send_purchased_asset(user, asset)
        @user = user
        @asset = asset
        
        fn = File.basename(asset.path)
        attachments[fn] = File.read(asset.path)
        
        mail(:to => user.email, :from => "mailer@example.com",
             :subject => "Here is your image: #{asset.name}")
      end
    end

Simply populate the attachments hash with your attachment data and ActionMailer takes care of the rest.  If you add an attachment, Rails does not implicitly render a template for the message; you will have to manually specify it (continue reading for information on how to do that).

Explicit multipart (i.e., specifying the parts manually rather than implicitly from the template names) has also been revamped; in Rails 2.x, you specified parts of a mail message like this:

    class UserMailer < ActionMailer::Base
      def confirmation_message(recipient)
        recipients      recipient.email
        subject         "Welcome!"
        from            "notifier@example.com"
        content_type    "multipart/alternative"

        part :content_type => "text/html",
          :body => render_message("confirmation-html", :user => recipient)

        part "text/plain" do |p|
          p.body = render_message("confirmation-plain", :user => recipient)
          p.transfer_encoding = "base64"
        end
      end
    end

To make the Action Mailer API more in line with controllers, Rails 3 adds a `respond_to`-like block syntax.  So this is how the same mailer looks using the new syntax:

    class UserMailer < ActionMailer::Base
      def confirmation_message(recipient)
        mail(:to => recipient.email, 
             :content_type => "multipart/alternative",
             :from => "notifier@example.com", 
             :subject => "Welcome!") do |format|
          
          format.html { render("confirmation_html", :user => recipient) }
          
          format.text(:transfer_encoding = "base64") do
            render("confirmation_plain", :user => recipient)
          end
          
        end
      end
    end

As you can see, the `mail` method takes a block and provides a block variable that configures the formats available.  This form is useful for specifying only certain templates to render or providing extra configuration information to the renderer for certain formats (as we've done here with `:transfer_encoding` for the plaintext template).  If you use this syntax, Rails does not implicitly render any mailer templates; you must explicitly provide every part you want included in the message.

#### New Active Record API

The Active Record DSL is radically different, largely thanks to its integration with Active Relation (see Section 1.1.3 for more information on the merge).  The old API won't be deprecated until Rails 3.1, but it's probably a good idea to go ahead and start migrating as much as possible to the new API now.  The simplest way to explain, at a practical level, how the new query API works is to explain it in terms of `named_scopes` (now just `scopes`, by the way).  Let's say you have the following model in an app on Rails 2.3:

    class Post < ActiveRecord::Base
      named_scope :published, :conditions => ['published_at NOT NULL']
      named_scope :by, lambda {|u| :conditions => {:user_id => u.id}}
    end
    
You can chain together named scopes infinitely, so if you were to have code like `Post.published.by(@user)`, it would find posts that were already published and written by the specified user.  What's actually going on there is that `Post.published` returns a `NamedScope` object, which is then operated on with the `by` method, adding more conditions, composing the SQL query you'll eventually execute with a call like `all` or `find`.

![Named scopes](scopes.png)
{.img}

Active Record/Active Relation work much the same way.  When you call a method, Active Record returns a `Relation`; these `Relation` objects are chained, composing a SQL query, until you execute that query by calling an enumerable method like `all`, `first`, or `each` (you may know this concept as *deferred execution* from other ORMs).  So, if you wanted to find the first five `Site` records that are active, you might do this in Rails 2:

    Site.find(:all, :conditions => {:active => true}, :limit => 5)

With Rails 3 and Active Relation, though, the code would look like this:

    Site.where(:active => true).limit(5)

Just like a `named_scope`, these `Relation` objects chain up with each other and compose the SQL query: `Site.where` returns a `Relation` that we call `limit` on, which returns a `Relation` that we call `find` on.  

![Relations](relations.png)
{.img}

As you'll see in Section 4.4, this new syntax opens up a lot of possibilities that either weren't possible or were quite ugly with the old API.

Now, let's take a look at converting some typical Rails 2.x model code into the new syntax.  Not every piece of the API is changing; in fact, much of the large-scale ideas are staying the same. Calls like `Model.find(:all)`, `Model.find(:first)`, and `Model.find_by_field` will still work. It's mostly the code surrounding the actual composition of the SQL query that is changing: essentially you can't provide argument hashes for any of the finder and calculation methods anymore.  In other words, these methods no longer take hash arguments:

* `find`
* `first`
* `all`
* `count`
* `calculate`
* `sum`
* `average`
* `maximum`
* `minimum`
* `update_all`

Active Record provides a new query interface for providing conditions and other parameters to these methods.  For example, here's a simple query in Rails 2:

    Post.find(:all, :conditions => {:category_id => @category.id})

In Rails 3, the `:conditions` hash is transformed into a call to `where`:

    posts = Post.where(:category_id => @category.id)
    
You can then operate on the posts variable just like an `Array`, since it includes `Enumerable`:

    posts.first       # => #<Post ...>
    posts.all         # => [#<Post ...>]
    
    posts.each {|post| post.destroy }

Other, similar hash arguments, like `:limit`, `:order`, and `:select`, are also methods now:

    posts.limit(2).order("id DESC").select("body")
    
Even `:include`, which adds joins on, is now a method:

    posts.include(:author).where("publshed NOT NULL")
    
That should get you started converting your code.  If you need more help, there are some great blog entries*My favorite is http://m.onkey.org/2010/1/22/active-record-query-interface*{.fn} and, of course, the RDocs.*Currently only accessible at http://api.rails.info/*{.fn}

### Minor pre-booting issues

If you've fixed the issues detailed here, you should be very close to booting.  Depending on your application's setup, though, you may need to do a few more things.

#### Delete `new_rails_defaults.rb`

As the Rails core team was moving towards Rails 3, an initializer was added to set a few of the configuration options to what they would be in Rails 3.  This file makes transitioning to Rails 3 easier, and it's a great tool to see if any part of your app would totally break on Rails 3.  Most of the settings in there relate to JSON (changes to which could easily break your API), with one determining whether or not Active Record does partial saves (something most developers don't need to worry about).  Now that you're actually on Rails 3, you should just delete this file.

#### Rack configuration is required

If you regenerated your Rails application, you might have noticed that the Rails 3 generator gives you a `config.ru` file in your application root.  If you're unfamiliar with how Rack*http://rack.rubyforge.org/*{.fn} works, `config.ru` is basically a configuration file that tells Rack where to find its endpoints.  Rails 3 is going seriously gung-ho on Rack, and as such, a `config.ru` is now required in your application to tell Rack how to mount it.  As noted earlier, the Rails 3 generator will spit one out for you, but if you're doing a manual upgrade for some reason, then you'll need to add one yourself.  

Interesting note: Remember that `YourApp::Application` class you created earlier in `application.rb`?  That's your Rack endpoint; that's why your `config.ru` looks like this (or you should create one that looks like this if you're doing all this manually): 

    # This file is used by Rack-based servers to start the application.

    require ::File.expand_path('../config/environment',  __FILE__)
    run YourApp::Application.instance

Neat, eh?  That's why I suggested you pick a meaningful name for that class: its touch runs quite deep in the request stack.

### Booting the application

Rails went the "Merb way" and has consolidated its many `script/*` commands into the `rails` binscript (or the `script/rails` command).  So things like `generate`, `server`, `plugin`, etc., are now `rails generate` and so on.  

Was `script/...`         | New command
-------------------------|-----------------------------------
`server`		             | `rails server` (or `rails s`)
`console`		             | `rails console` (or `rails c`)
`generate`		           | `rails generate`	(or `rails g`)
`destroy`		             | `rails destroy`		
`plugin`		             | `rails plugin`		
`runner`		             | `rails runner`
`performance/benchmark`	 | `rails benchmark`		
`performance/profiler`	 | `rails profiler`
`about`		               | `rake about`		
`dbconsole`              | `rails dbconsole` (or `rails db`)

So to start the application up, just run `rails server` inside the application root (or, optionally, `ruby script/rails server`).  Once the server's booted, navigate over to `http://localhost:3000` and you should see a familiar friend:

![You're on board!](http://media.tumblr.com/tumblr_kxctzqe4Su1qz4tvk.jpg){.screenshot}
{.img}

Click on "About your application's environment" to see more information about the application; you should see the Rails version is "Rails 3.0.0".  Once you've verified it's showing the right version, you'll probably want to remove `public/index.html`.

### It's booted!  Now what...?

Your application is booted, you can at least get a request into a controller, so now what?  Well there are a couple of things to keep in mind...

#### Check out your views

You'll want to give your views the once-over to make sure there's no deprecated code (the removal of `link_to_function` and friends is probably going to be the most common), usage of removed/bad plugins, or usage of Ruby that's not supported on 1.8.7 or later.  Booting the application will catch many of these problems in models and controllers, but templates aren't evaluated until they're rendered, so something could still be lurking in there.  Also keep in mind that all output strings (i.e., things you output using `<%=`) are escaped by default; this will cause problems for any helper or method that outputs HTML (especially in your tests; see Section 4.2 for how to fix it).

#### Deprecations coming soon

There are a lot of things that are being deprecated in Rails 3.  Many of them won't break your application yet, but they will generate warnings you might not see in your logs.  You can see a full list in the **Deprecation Checklist** section of the book, but there are a few that will bite you harder and probably sooner:

* **`allow_concurrency` is no longer needed** Since Rails is Enterprise Thread Safe&trade; now, you no longer need this setting.
* **Requiring `activerecord`/`activesupport`**  People could never remember whether it was `active_record` or `activerecord`, so the Rails team made it so that both will work.  Starting very soon, though, you will be required to use the underscored form (e.g., `active_record`).
* **`filter_parameter_logging` API is changing**  The `filter_parameter_logging` lets you set which parameter names to filter out of logs (e.g., don't log your users' passwords).  This feature is now available by setting them up in `application.rb` like this: `config.filter_parameters << :password`
* **Active Record's errors API is different** If you're used to using `errors.on_base` or `errors.add_to_base`, then you'll need to learn the new API (check the deprecations checklist).


